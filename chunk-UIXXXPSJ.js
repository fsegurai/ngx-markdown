import{a as v,b as k}from"./chunk-4DNKDDWF.js";import{a as w,b}from"./chunk-BCIRNEUW.js";import{Gb as x,Ha as o,Ia as n,Ja as e,Ka as p,N as m,aa as c,ab as t,ea as u,ia as l,kb as s,lb as h,mb as f,qa as y}from"./chunk-KUNPX5WM.js";var a=class a{constructor(){this.elementRef=m(c);this.myValue="print('hello-world')"}ngOnInit(){this.setHeadings()}setHeadings(){let r=[];this.elementRef.nativeElement.querySelectorAll("h2").forEach(i=>r.push(i)),this.headings=r}};a.\u0275fac=function(i){return new(i||a)},a.\u0275cmp=y({type:a,selectors:[["app-syntax-highlight"]],decls:25,vars:11,consts:[[3,"headings"],["id","getting-started"],["id","auto-detect"],[3,"src"],["id","interpolation"],[3,"emoji"],["id","language-pipe"],[3,"innerHTML"]],template:function(i,g){i&1&&(n(0,"app-scrollspy-nav-layout",0)(1,"h1",1),t(2,"Syntax Highlight"),e(),n(3,"section")(4,"h2",2),t(5,"Auto-Detect"),e(),n(6,"markdown"),t(7,`
      When using the \`src\` input property to load file remotely, language for syntax highlight will be auto-detected
      based on the loaded file extension.

      The following example...

      \`\`\`html
      <markdown [src]="'app/syntax-highlight/remote/for-loop.js'"></markdown>
      \`\`\`

      Would render with Javascript syntax highlight based on the \`js\` file extension.
    `),e(),p(8,"markdown",3),e(),n(9,"section")(10,"h2",4),t(11,"Interpolation"),e(),n(12,"markdown",5),t(13,"\n      > :bulb: Using interpolation requires the uses of `ngPreserveWhitespaces` to keep indentation and spaces untouched\n      during compilation.\n\n      When using [interpolation](https://angular.io/guide/template-syntax#interpolation-), the language for code block\n      must be specified after the first three backticks.\n\n      ````html\n      <markdown ngPreserveWhitespaces>\n        ```typescript\n        export function greetings(name: string): string {\n          return 'Hello ' + name;\n        }\n        ```\n      </markdown>\n      ````\n      ##### _* Characters such as `<, >, {, }` directly written in the HTML template file must be escaped\n      so that the compiler doesn't try to bind it as regular Angular code_.\n\n      Would render with TypeScript syntax highlight based on the specified `typescript` language.\n    "),e(),n(14,"markdown"),t(15,"\n      ```typescript\n      export function greetings(name: string): string {\n        return 'Hello ' + name;\n      }\n      ```\n    "),e()(),n(16,"section")(17,"h2",6),t(18,"Language Pipe"),e(),n(19,"markdown"),t(20,"\n      When using the `markdown` pipe, you can specify the syntax highlight language by chaining the `language` pipe.\n\n      For example, having the python code `print('hello world')` into the `myValue` variable could be parsed specifying\n      the language as follow...\n\n      ````\n      ```html\n      <div [innerHTML]=\"myValue | language : 'python' | markdown | async\"><div>\n      ```\n      ````\n\n      Would render with Python syntax highlight as specified with the `language` pipe in front of the `markdown` pipe.\n    "),e(),p(21,"div",7),s(22,"language"),s(23,"markdown"),s(24,"async"),e()()),i&2&&(o("headings",g.headings),l(8),o("src","app/syntax-highlight/remote/for-loop.js"),l(4),o("emoji",!0),l(9),o("innerHTML",h(24,9,h(23,7,f(22,4,g.myValue,"python"))),u))},dependencies:[x,v,w,k,b],styles:["[_nghost-%COMP%]{display:block}"],changeDetection:0});var d=a;export{d as default};
